// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a_p13 ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:381


#include "HelloWorldTypeSupportC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "HelloWorldTypeSupportC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be\be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for HelloWorldTypeSupport.

HelloWorldTypeSupport_ptr
TAO::Objref_Traits<HelloWorldTypeSupport>::duplicate (
    HelloWorldTypeSupport_ptr p)
{
  return HelloWorldTypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<HelloWorldTypeSupport>::release (
    HelloWorldTypeSupport_ptr p)
{
  ::CORBA::release (p);
}

HelloWorldTypeSupport_ptr
TAO::Objref_Traits<HelloWorldTypeSupport>::nil (void)
{
  return HelloWorldTypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<HelloWorldTypeSupport>::marshal (
    const HelloWorldTypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

HelloWorldTypeSupport::HelloWorldTypeSupport (void)
{}

HelloWorldTypeSupport::~HelloWorldTypeSupport (void)
{}

void 
HelloWorldTypeSupport::_tao_any_destructor (void *_tao_void_pointer)
{
  HelloWorldTypeSupport *_tao_tmp_pointer =
    static_cast<HelloWorldTypeSupport *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

HelloWorldTypeSupport_ptr
HelloWorldTypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return HelloWorldTypeSupport::_duplicate (
      dynamic_cast<HelloWorldTypeSupport_ptr> (_tao_objref)
    );
}

HelloWorldTypeSupport_ptr
HelloWorldTypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return HelloWorldTypeSupport::_duplicate (
      dynamic_cast<HelloWorldTypeSupport_ptr> (_tao_objref)
    );
}

HelloWorldTypeSupport_ptr
HelloWorldTypeSupport::_duplicate (HelloWorldTypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
HelloWorldTypeSupport::_tao_release (HelloWorldTypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
HelloWorldTypeSupport::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:HelloWorldTypeSupport:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* HelloWorldTypeSupport::_interface_repository_id (void) const
{
  return "IDL:HelloWorldTypeSupport:1.0";
}

::CORBA::Boolean
HelloWorldTypeSupport::marshal (TAO_OutputCDR &)
{
  return false;
}

// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_HelloWorldTypeSupport (
    ::CORBA::tk_local_interface,
    "IDL:HelloWorldTypeSupport:1.0",
    "HelloWorldTypeSupport");
  
::CORBA::TypeCode_ptr const _tc_HelloWorldTypeSupport =
  &_tao_tc_HelloWorldTypeSupport;

// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for HelloWorldDataWriter.

HelloWorldDataWriter_ptr
TAO::Objref_Traits<HelloWorldDataWriter>::duplicate (
    HelloWorldDataWriter_ptr p)
{
  return HelloWorldDataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<HelloWorldDataWriter>::release (
    HelloWorldDataWriter_ptr p)
{
  ::CORBA::release (p);
}

HelloWorldDataWriter_ptr
TAO::Objref_Traits<HelloWorldDataWriter>::nil (void)
{
  return HelloWorldDataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<HelloWorldDataWriter>::marshal (
    const HelloWorldDataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

HelloWorldDataWriter::HelloWorldDataWriter (void)
{}

HelloWorldDataWriter::~HelloWorldDataWriter (void)
{}

void 
HelloWorldDataWriter::_tao_any_destructor (void *_tao_void_pointer)
{
  HelloWorldDataWriter *_tao_tmp_pointer =
    static_cast<HelloWorldDataWriter *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

HelloWorldDataWriter_ptr
HelloWorldDataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return HelloWorldDataWriter::_duplicate (
      dynamic_cast<HelloWorldDataWriter_ptr> (_tao_objref)
    );
}

HelloWorldDataWriter_ptr
HelloWorldDataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return HelloWorldDataWriter::_duplicate (
      dynamic_cast<HelloWorldDataWriter_ptr> (_tao_objref)
    );
}

HelloWorldDataWriter_ptr
HelloWorldDataWriter::_duplicate (HelloWorldDataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
HelloWorldDataWriter::_tao_release (HelloWorldDataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
HelloWorldDataWriter::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:HelloWorldDataWriter:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* HelloWorldDataWriter::_interface_repository_id (void) const
{
  return "IDL:HelloWorldDataWriter:1.0";
}

::CORBA::Boolean
HelloWorldDataWriter::marshal (TAO_OutputCDR &)
{
  return false;
}

// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_HelloWorldDataWriter (
    ::CORBA::tk_local_interface,
    "IDL:HelloWorldDataWriter:1.0",
    "HelloWorldDataWriter");
  
::CORBA::TypeCode_ptr const _tc_HelloWorldDataWriter =
  &_tao_tc_HelloWorldDataWriter;

// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for HelloWorldDataReader.

HelloWorldDataReader_ptr
TAO::Objref_Traits<HelloWorldDataReader>::duplicate (
    HelloWorldDataReader_ptr p)
{
  return HelloWorldDataReader::_duplicate (p);
}

void
TAO::Objref_Traits<HelloWorldDataReader>::release (
    HelloWorldDataReader_ptr p)
{
  ::CORBA::release (p);
}

HelloWorldDataReader_ptr
TAO::Objref_Traits<HelloWorldDataReader>::nil (void)
{
  return HelloWorldDataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<HelloWorldDataReader>::marshal (
    const HelloWorldDataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

HelloWorldDataReader::HelloWorldDataReader (void)
{}

HelloWorldDataReader::~HelloWorldDataReader (void)
{}

void 
HelloWorldDataReader::_tao_any_destructor (void *_tao_void_pointer)
{
  HelloWorldDataReader *_tao_tmp_pointer =
    static_cast<HelloWorldDataReader *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

HelloWorldDataReader_ptr
HelloWorldDataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return HelloWorldDataReader::_duplicate (
      dynamic_cast<HelloWorldDataReader_ptr> (_tao_objref)
    );
}

HelloWorldDataReader_ptr
HelloWorldDataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return HelloWorldDataReader::_duplicate (
      dynamic_cast<HelloWorldDataReader_ptr> (_tao_objref)
    );
}

HelloWorldDataReader_ptr
HelloWorldDataReader::_duplicate (HelloWorldDataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
HelloWorldDataReader::_tao_release (HelloWorldDataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
HelloWorldDataReader::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:HelloWorldDataReader:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* HelloWorldDataReader::_interface_repository_id (void) const
{
  return "IDL:HelloWorldDataReader:1.0";
}

::CORBA::Boolean
HelloWorldDataReader::marshal (TAO_OutputCDR &)
{
  return false;
}

// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_HelloWorldDataReader (
    ::CORBA::tk_local_interface,
    "IDL:HelloWorldDataReader:1.0",
    "HelloWorldDataReader");
  
::CORBA::TypeCode_ptr const _tc_HelloWorldDataReader =
  &_tao_tc_HelloWorldDataReader;

// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldTypeSupport>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldTypeSupport>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }
  
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldTypeSupport>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    HelloWorldTypeSupport_ptr _tao_elem)
{
  HelloWorldTypeSupport_ptr _tao_objptr =
    HelloWorldTypeSupport::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    HelloWorldTypeSupport_ptr *_tao_elem)
{
  TAO::Any_Impl_T<HelloWorldTypeSupport>::insert (
      _tao_any,
      HelloWorldTypeSupport::_tao_any_destructor,
      _tc_HelloWorldTypeSupport,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    HelloWorldTypeSupport_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<HelloWorldTypeSupport>::extract (
        _tao_any,
        HelloWorldTypeSupport::_tao_any_destructor,
        _tc_HelloWorldTypeSupport,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldDataWriter>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldDataWriter>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }
  
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldDataWriter>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    HelloWorldDataWriter_ptr _tao_elem)
{
  HelloWorldDataWriter_ptr _tao_objptr =
    HelloWorldDataWriter::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    HelloWorldDataWriter_ptr *_tao_elem)
{
  TAO::Any_Impl_T<HelloWorldDataWriter>::insert (
      _tao_any,
      HelloWorldDataWriter::_tao_any_destructor,
      _tc_HelloWorldDataWriter,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    HelloWorldDataWriter_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<HelloWorldDataWriter>::extract (
        _tao_any,
        HelloWorldDataWriter::_tao_any_destructor,
        _tc_HelloWorldDataWriter,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// d:\richi\workspace\desarrollo\dds\opendds\instalaciones\opendds3.3\ace_wrappers_x64\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldDataReader>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}

namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldDataReader>::marshal_value (TAO_OutputCDR &)
  {
    return false;
  }
  
  template<>
  ::CORBA::Boolean
  Any_Impl_T<HelloWorldDataReader>::demarshal_value (TAO_InputCDR &)
  {
    return false;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    HelloWorldDataReader_ptr _tao_elem)
{
  HelloWorldDataReader_ptr _tao_objptr =
    HelloWorldDataReader::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    HelloWorldDataReader_ptr *_tao_elem)
{
  TAO::Any_Impl_T<HelloWorldDataReader>::insert (
      _tao_any,
      HelloWorldDataReader::_tao_any_destructor,
      _tc_HelloWorldDataReader,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    HelloWorldDataReader_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<HelloWorldDataReader>::extract (
        _tao_any,
        HelloWorldDataReader::_tao_any_destructor,
        _tc_HelloWorldDataReader,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



