/* HelloWorld_subscriber.cxx

   A subscription example

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language C++ -example <arch> HelloWorld.idl

   Example subscription of type HelloWorld automatically generated by 
   'rtiddsgen'. To test them follow these steps:

   (1) Compile this file and the example publication.

   (2) Start the subscription with the command
       objs/<arch>/HelloWorld_subscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       objs/<arch>/HelloWorld_publisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
                          
       On Unix: 
       
       objs/<arch>/HelloWorld_publisher <domain_id> 
       objs/<arch>/HelloWorld_subscriber <domain_id> 
                            
       On Windows:
       
       objs\<arch>\HelloWorld_publisher <domain_id>  
       objs\<arch>\HelloWorld_subscriber <domain_id>   
              
       
modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#ifdef RTI_VX653
#include <vThreadsData.h>
#endif
#include "dds/DdsDcpsC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DCPS/Service_Participant.h"
#include "HelloWorldTypeSupportImpl.h"

using namespace OpenDDS::DCPS;

class HelloWorldListener : public DDS::DataReaderListener {
  public:
    virtual void on_requested_deadline_missed(
        DDS::DataReader* /*reader*/,
        const DDS::RequestedDeadlineMissedStatus& /*status*/) {}
    
    virtual void on_requested_incompatible_qos(
        DDS::DataReader* /*reader*/,
        const DDS::RequestedIncompatibleQosStatus& /*status*/) {}
    
    virtual void on_sample_rejected(
        DDS::DataReader* /*reader*/,
        const DDS::SampleRejectedStatus& /*status*/) {}

    virtual void on_liveliness_changed(
        DDS::DataReader* /*reader*/,
        const DDS::LivelinessChangedStatus& /*status*/) {}

    virtual void on_sample_lost(
        DDS::DataReader* /*reader*/,
        const DDS::SampleLostStatus& /*status*/) {}

    virtual void on_subscription_matched(
        DDS::DataReader* /*reader*/,
        const DDS::SubscriptionMatchedStatus& /*status*/) {}

    virtual void on_data_available(DDS::DataReader* reader);
};

void HelloWorldListener::on_data_available(DDS::DataReader* reader)
{
    HelloWorldDataReader *HelloWorld_reader = NULL;
    HelloWorldSeq data_seq;
    DDS::SampleInfoSeq info_seq;
    DDS::ReturnCode_t retcode;
    int i;

    HelloWorld_reader = HelloWorldDataReader::_narrow(reader);
    if (HelloWorld_reader == NULL) {
        printf("DataReader narrow error\n");
        return;
    }

    retcode = HelloWorld_reader->take(
        data_seq, info_seq, DDS::LENGTH_UNLIMITED,
        DDS::ANY_SAMPLE_STATE, DDS::ANY_VIEW_STATE, DDS::ANY_INSTANCE_STATE);

    if (retcode == DDS::RETCODE_NO_DATA) {
        return;
    } else if (retcode != DDS::RETCODE_OK) {
        printf("take error %d\n", retcode);
        return;
    }

    for (i = 0; i < data_seq.length(); ++i) {
        if (info_seq[i].valid_data) {
            std::cout << "HelloWorld::count = " << data_seq[i].counter << std::endl;
            std::cout << "HelloWorld::message = " << data_seq[i].message.in() << std::endl;
        }
    }

    retcode = HelloWorld_reader->return_loan(data_seq, info_seq);
    if (retcode != DDS::RETCODE_OK) {
        printf("return loan error %d\n", retcode);
    }
}

/* Delete all entities */
static int subscriber_shutdown(
    DDS::DomainParticipant *participant)
{
    DDS::ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS::RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = TheParticipantFactory->delete_participant(participant);
        if (retcode != DDS::RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides the finalize_instance() method on
       domain participant factory for people who want to release memory used
       by the participant factory. Uncomment the following block of code for
       clean destruction of the singleton. */
/*
    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }
*/
    return status;
}

extern "C" int subscriber_main(int domainId, int sample_count, int argc, char *argv[])
{
    DDS::DomainParticipant *participant = NULL;
    DDS::Subscriber *subscriber = NULL;
    DDS::Topic *topic = NULL;
    HelloWorldListener *reader_listener = NULL; 
    DDS::DataReader *reader = NULL;
    DDS::ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    int receive_period = 4000;
    int status = 0;

    TheParticipantFactoryWithArgs(argc, argv);

    /* To customize the participant QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::DomainParticipantQos pQos;
    TheParticipantFactory->get_default_participant_qos(pQos);
    participant = TheParticipantFactory->create_participant(
        domainId, pQos, 
        NULL /* listener */, NO_STATUS_MASK);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the subscriber QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::SubscriberQos suQos;
    participant->get_default_subscriber_qos(suQos);
    subscriber = participant->create_subscriber(
        suQos, NULL /* listener */, NO_STATUS_MASK);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register the type before creating the topic */
    HelloWorldTypeSupportImpl *type_support = new HelloWorldTypeSupportImpl();
    type_name = strdup("HelloWorld");
    retcode = type_support->register_type(
        participant, type_name);
    if (retcode != DDS::RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the topic QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::TopicQos tQos;
    participant->get_default_topic_qos(tQos);
    topic = participant->create_topic(
        "Example HelloWorld",
        type_name, tQos, NULL /* listener */,
        NO_STATUS_MASK);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Create a data reader listener */
    reader_listener = new HelloWorldListener();

    /* To customize the data reader QoS, use 
       the configuration file USER_QOS_PROFILES.xml */
    DDS::DataReaderQos rQos;
    subscriber->get_default_datareader_qos(rQos);
    reader = subscriber->create_datareader(
        topic, rQos, reader_listener,
        NO_STATUS_MASK);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant);
        delete reader_listener;
        return -1;
    }

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {

        printf("HelloWorld subscriber sleeping for %d sec...\n",
               receive_period);

        Sleep(receive_period);
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant);
    delete reader_listener;

    return status;
}

#if defined(RTI_WINCE)
int wmain(int argc, wchar_t** argv)
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */ 
    
    if (argc >= 2) {
        domainId = _wtoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = _wtoi(argv[2]);
    }
    
    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, sample_count);
}

#elif !(defined(RTI_VXWORKS) && !defined(__RTP__)) && !defined(RTI_PSOS)
int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */


    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
        set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
                                  NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */
                                  
    return subscriber_main(domainId, sample_count, argc, argv);
}
#endif


